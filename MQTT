#include <ESP8266WiFi.h>
#include <PubSubClient.h>

/*Put your SSID & Password*/
const char* ssid = "Sakura";  // Enter SSID here
const char* password = "TARA061628";  //Enter Password here

//Static IP address configuration
IPAddress staticIP(192, 168, 227, 100); //ESP static ip
IPAddress gateway(192, 168, 227, 190);   //IP Address of your WiFi Router (Gateway)
IPAddress subnet(255, 255, 0, 0);  //Subnet mask
IPAddress primaryDNS(8, 8, 8, 8);   //optional
IPAddress secondaryDNS(8, 8, 4, 4); //optional
const char* deviceName = "nodemcu";


const char *MQTT_HOST = "192.168.227.79";
const int MQTT_PORT = 1883;
const char *MQTT_CLIENT_ID = "ESP8266 NodeMCU";
const char *MQTT_USER = "admin";
const char *MQTT_PASSWORD = "password";
const char *TOPIC = "Try/MQTT3";
const char *TOPIC2 = "Try/MQTT2";

WiFiClient client;
PubSubClient mqttClient(client);


int lock_time = 3000; // 1000ms = 1s

uint8_t LED1pin = D0;
bool Door1status = LOW;

uint8_t LED2pin = D1;
bool Door2status = LOW;

uint8_t LED3pin = D2;
bool Door3status = LOW;

uint8_t LED4pin = D3;
bool Door4status = LOW;

uint8_t LED5pin = D4;
bool Door5status = LOW;

uint8_t LED6pin = D5;
bool Door6status = LOW;

uint8_t LED7pin = D6;
bool Door7status = LOW;

uint8_t LED8pin = D7;
bool Door8status = LOW;

void setup() {
  Serial.begin(115200);
  delay(100);
  pinMode(LED1pin, OUTPUT);
  pinMode(LED2pin, OUTPUT);
  pinMode(LED3pin, OUTPUT);
  pinMode(LED4pin, OUTPUT);
  pinMode(LED5pin, OUTPUT);
  pinMode(LED6pin, OUTPUT);
  pinMode(LED7pin, OUTPUT);
  pinMode(LED8pin, OUTPUT);

  Serial.println("Connecting to ");
  Serial.println(ssid);

  WiFi.disconnect();  //Prevent connecting to wifi based on previous configuration
  WiFi.hostname(deviceName);      // DHCP Hostname (useful for finding device for static lease)
  // WiFi.config(staticIP, subnet, gateway, dns);
  WiFi.config(staticIP, gateway, subnet, primaryDNS, secondaryDNS);
  //connect to your local wi-fi network
  WiFi.begin(ssid, password);
  WiFi.mode(WIFI_STA); //WiFi mode station (connect to wifi router only

  //check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected..!");
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());


  mqttClient.setServer(MQTT_HOST, MQTT_PORT);
  mqttClient.setCallback(callback);

  while (!client.connected()) {
    if (mqttClient.connect(MQTT_CLIENT_ID, MQTT_USER, MQTT_PASSWORD )) {
      Serial.println("Connected to MQTT broker");
    } else {
      delay(500);
      Serial.print(".");
    }
  }

  mqttClient.subscribe(TOPIC);
}

void loop() {

  mqttClient.loop();

  if(Door1status) {
    digitalWrite(LED1pin, HIGH);  // turn the LED on (HIGH is the voltage level)
    // delay(lock_time);                      // wait for a second
    // digitalWrite(LED1pin, LOW);   // turn the LED off by making the voltage LOW
    // Door1status = LOW;
  }
  else {
    digitalWrite(LED1pin, LOW);
  }
  
  if(Door2status) {
    digitalWrite(LED2pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED2pin, LOW);
    // Door2status = LOW;
  }
  else {
    digitalWrite(LED2pin, LOW);
  }

  if(Door3status) {
    digitalWrite(LED3pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED3pin, LOW);
    // Door3status = LOW;
  }
  else {
    digitalWrite(LED3pin, LOW);
  }

  if(Door4status) {
    digitalWrite(LED4pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED4pin, LOW);
    // Door4status = LOW;
  }
  else {
    digitalWrite(LED4pin, LOW);
  }

  if(Door5status) {
    digitalWrite(LED5pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED5pin, LOW);
    // Door5status = LOW;
  }
  else {
    digitalWrite(LED5pin, LOW);
  }

  if(Door6status) {
    digitalWrite(LED6pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED6pin, LOW);
    // Door6status = LOW;
  }
  else {
    digitalWrite(LED6pin, LOW);
  }

  if(Door7status) {
    digitalWrite(LED7pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED7pin, LOW);
    // Door7status = LOW;
  }
  else {
    digitalWrite(LED7pin, LOW);
  }

  if(Door8status) {
    digitalWrite(LED8pin, HIGH);
    // delay(lock_time);
    // digitalWrite(LED8pin, LOW);
    // Door8status = LOW;
  }
  else {
    digitalWrite(LED8pin, LOW);
  }

}


void callback(char* topic, byte* payload, unsigned int length)
{
  Serial.print("Message received in topic: ");
  Serial.print(topic);
  Serial.print("   length is:");
  Serial.println(length);

  Serial.print("Data Received From Broker:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    if ((char)payload[i] == 'A') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door1status = HIGH;
      } else {
        Door1status = LOW;
      }
    }
    if ((char)payload[i] == 'B') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door2status = HIGH;
      } else {
        Door2status = LOW;
      }
    }
    if ((char)payload[i] == 'C') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door3status = HIGH;
      } else {
        Door3status = LOW;
      }
    }
    if ((char)payload[i] == 'D') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door4status = HIGH;
      } else {
        Door4status = LOW;
      }
    }
    if ((char)payload[i] == 'E') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door5status = HIGH;
      } else {
        Door5status = LOW;
      }
    }
    if ((char)payload[i] == 'F') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door6status = HIGH;
      } else {
        Door6status = LOW;
      }
    }
    if ((char)payload[i] == 'G') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door7status = HIGH;
      } else {
        Door7status = LOW;
      }
    }
    if ((char)payload[i] == 'H') {
      char status = (char)payload[i+3];
      if (status == ' ') {
        status = (char)payload[i+4];
      }
      if (status == '1') {
        Door8status = HIGH;
      } else {
        Door8status = LOW;
      }
    }
  }
  Serial.println();
  Serial.println("-----------------------");
  Serial.println();

  MQTTPOST();
}

void MQTTPOST()
{
  //payload formation begins here
  String payload ="{\n";
  if(Door1status) {
    payload += "  \"A\": \"1\",\n";
  }
  else {
    payload += "  \"A\": \"0\",\n";
  }
  if(Door2status) {
    payload += "  \"B\": \"1\",\n";
  }
  else {
    payload += "  \"B\": \"0\",\n";
  }
  if(Door3status) {
    payload += "  \"C\": \"1\",\n";
  }
  else {
    payload += "  \"C\": \"0\",\n";
  }
  if(Door4status) {
    payload += "  \"D\": \"1\",\n";
  }
  else {
    payload += "  \"D\": \"0\",\n";
  }
  if(Door5status) {
    payload += "  \"E\": \"1\",\n";
  }
  else {
    payload += "  \"E\": \"0\",\n";
  }
  if(Door6status) {
    payload += "  \"F\": \"1\",\n";
  }
  else {
    payload += "  \"F\": \"0\",\n";
  }
  if(Door7status) {
    payload += "  \"G\": \"1\",\n";
  }
  else {
    payload += "  \"G\": \"0\",\n";
  }
  if(Door8status) {
    payload += "  \"H\": \"1\",\n";
  }
  else {
    payload += "  \"H\": \"0\",\n";
  }
  payload += "}";

  char attributes[1000];
  payload.toCharArray( attributes, 1000 );
  mqttClient.publish(TOPIC2, attributes); // topic="test" MQTT data post command.
  Serial.println( attributes );
}
